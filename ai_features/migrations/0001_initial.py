# Generated by Django 4.2.7 on 2025-08-09 14:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('timetable', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chat_type', models.CharField(choices=[('timetable_query', 'Timetable Query'), ('academic_help', 'Academic Help'), ('schedule_optimization', 'Schedule Optimization'), ('general_query', 'General Query')], default='general_query', max_length=30)),
                ('session_id', models.CharField(help_text='Unique session identifier', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_chats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='TimetableSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.CharField(max_length=50)),
                ('year', models.IntegerField()),
                ('section', models.CharField(max_length=5)),
                ('academic_year', models.CharField(max_length=10)),
                ('semester', models.IntegerField()),
                ('suggestion_data', models.JSONField(help_text='Generated timetable data')),
                ('optimization_score', models.FloatField(default=0.0, help_text='AI optimization score (0-100)')),
                ('conflicts_resolved', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('generated', 'Generated'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('implemented', 'Implemented')], default='generated', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_suggestions', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_suggestions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-optimization_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudyRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('subject_focus', 'Subject Focus'), ('study_schedule', 'Study Schedule'), ('exam_preparation', 'Exam Preparation'), ('attendance_improvement', 'Attendance Improvement'), ('performance_enhancement', 'Performance Enhancement')], max_length=25)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('is_read', models.BooleanField(default=False)),
                ('is_implemented', models.BooleanField(default=False)),
                ('confidence_score', models.FloatField(default=0.0, help_text='AI confidence score (0-100)')),
                ('generated_data', models.JSONField(default=dict, help_text='AI analysis data used for recommendation')),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_recommendations', to='accounts.studentprofile')),
                ('subjects', models.ManyToManyField(blank=True, related_name='study_recommendations', to='timetable.subject')),
            ],
            options={
                'ordering': ['-priority', '-confidence_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SmartNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('schedule_reminder', 'Schedule Reminder'), ('deadline_alert', 'Deadline Alert'), ('performance_alert', 'Performance Alert'), ('attendance_warning', 'Attendance Warning'), ('optimization_suggestion', 'Optimization Suggestion'), ('system_update', 'System Update')], max_length=25)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('priority', models.CharField(choices=[('info', 'Info'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('ai_context', models.JSONField(default=dict, help_text='AI decision context for this notification')),
                ('confidence_score', models.FloatField(default=0.0, help_text='AI confidence in notification relevance')),
                ('is_read', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_for', models.DateTimeField(blank=True, help_text='When to deliver this notification', null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='smart_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('insight_type', models.CharField(choices=[('attendance_pattern', 'Attendance Pattern'), ('performance_trend', 'Performance Trend'), ('subject_difficulty', 'Subject Difficulty'), ('schedule_optimization', 'Schedule Optimization'), ('resource_allocation', 'Resource Allocation'), ('prediction', 'Performance Prediction')], max_length=25)),
                ('scope', models.CharField(choices=[('individual', 'Individual Student'), ('class', 'Class/Section'), ('course', 'Course'), ('year', 'Year'), ('institution', 'Institution-wide')], max_length=15)),
                ('description', models.TextField()),
                ('course', models.CharField(blank=True, max_length=50)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('section', models.CharField(blank=True, max_length=5)),
                ('insight_data', models.JSONField(help_text='Detailed analysis data')),
                ('confidence_score', models.FloatField(help_text='AI confidence in this insight (0-100)')),
                ('impact_score', models.FloatField(default=0.0, help_text='Potential impact score (0-100)')),
                ('recommendations', models.TextField(blank=True, help_text='AI-generated recommendations based on this insight')),
                ('is_actionable', models.BooleanField(default=True)),
                ('is_viewed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('generated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performance_insights', to='accounts.studentprofile')),
            ],
            options={
                'ordering': ['-impact_score', '-confidence_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender', models.CharField(choices=[('user', 'User'), ('ai', 'AI Assistant')], max_length=10)),
                ('message', models.TextField()),
                ('context_data', models.JSONField(blank=True, default=dict, help_text='Additional context for AI processing')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='ai_features.aichat')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AIAnalyticsReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('attendance_analytics', 'Attendance Analytics'), ('performance_analytics', 'Performance Analytics'), ('timetable_efficiency', 'Timetable Efficiency'), ('resource_utilization', 'Resource Utilization'), ('predictive_analysis', 'Predictive Analysis'), ('trend_analysis', 'Trend Analysis')], max_length=25)),
                ('title', models.CharField(max_length=200)),
                ('period', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('semester', 'Semester'), ('annual', 'Annual')], max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('course_filter', models.CharField(blank=True, max_length=50)),
                ('year_filter', models.IntegerField(blank=True, null=True)),
                ('section_filter', models.CharField(blank=True, max_length=5)),
                ('report_data', models.JSONField(help_text='Complete analytics data')),
                ('summary', models.TextField(help_text='AI-generated summary of key findings')),
                ('key_insights', models.JSONField(default=list, help_text='List of key insights')),
                ('recommendations', models.TextField(help_text='AI recommendations based on analysis')),
                ('is_published', models.BooleanField(default=False)),
                ('views_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
